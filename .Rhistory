par <- c(muB=0.5, muG=0.5, sB=0.5, sG=0.5)
par
(B.test, G.test, ind.test, par)
ind.lik(B.test, G.test, ind.test, par)
Thetatest <- rep(0.5, 4)
G.test <- 0.5
B.test <- 0.6
ind.lik<- function(B.est, G.est, ind.data, Theta){
###########################################################################
## This function returns the integrand value for the likelihood function
############################################################################
#    B.est <- par.est[1]
#    G.est <- par.est[2]
muB<- Theta$muB
muG <- Theta$muG
sB <- Theta$sB
sG <- Theta$sG
fb <- dlnorm(B.est, meanlog = muB, sdlog = sB)
fg <- dlnorm(G.est, meanlog = muG, sdlog = sG)
#Since it is very troublesome to estimate the value of the envy parameter,
# we fix it to some high value
A.est <- 10
util <- with(ind.data, {
exp(pecpay - 2*B.est*guilt - G.est*spline - 2*A.est*envy)
})
util <- split(util, ind.data$choice.id)
cvec <- split(ind.data$chosen, ind.data$choice.id)
probs <- mapply(function(u, s) u[s]/sum(u),
util, cvec)
Si <- prod(probs)
return(Si*fb*fg)
}
ind.test <- mmnl.data[[1]]
ind.lik(B.est = B.test, G.est=G.test, ind.data=ind.test, Theta=Thetatest)
ind.lik<- function(B.est, G.est, ind.data, Theta){
###########################################################################
## This function returns the integrand value for the likelihood function
############################################################################
#    B.est <- par.est[1]
#    G.est <- par.est[2]
muB<- Theta[1]
muG <- Theta[2]
sB <- Theta[3]
sG <- Theta[4]
fb <- dlnorm(B.est, meanlog = muB, sdlog = sB)
fg <- dlnorm(G.est, meanlog = muG, sdlog = sG)
#Since it is very troublesome to estimate the value of the envy parameter,
# we fix it to some high value
A.est <- 10
util <- with(ind.data, {
exp(pecpay - 2*B.est*guilt - G.est*spline - 2*A.est*envy)
})
util <- split(util, ind.data$choice.id)
cvec <- split(ind.data$chosen, ind.data$choice.id)
probs <- mapply(function(u, s) u[s]/sum(u),
util, cvec)
Si <- prod(probs)
return(Si*fb*fg)
}
ind.test <- mmnl.data[[1]]
ind.lik(B.est = B.test, G.est=G.test, ind.data=ind.test, Theta=Thetatest)
par
try(optim(par, loglik, doubleint=doubleint, ind.lik = ind.lik, mmnl.data = mmnl.data,
method = "BFGS"))
result <- optim(par, loglik, doubleint=doubleint, ind.lik = ind.lik, mmnl.data = mmnl.data,
method = "BFGS", control = list(trace = 6, fnscale = -1, maxit = 20))
doubleint(ind.lik, ind.test, Thetatest)$value
loglik(doubleint, ind.test, Thetatest)
loglik(doubleint, ind.test, mmnl.data, Thetatest)
loglik(doubleint, ind.lik, mmnl.data, Thetatest)
result <- optim(par, loglik, doubleint=doubleint, ind.lik = ind.lik, mmnl.data = mmnl.data,
method = "BFGS", control = list(trace = 6, fnscale = -1, maxit = 20))
itertime <- system.time(loglik(doubleint, ind.lik, mmnl.data, Thetatest))
itertime
3000/3600
debug(optim)
result <- optim(par, loglik, doubleint=doubleint, ind.lik = ind.lik, mmnl.data = mmnl.data,
method = "BFGS", control = list(trace = 6, fnscale = -1, maxit = 20))
?grep
setwd("~/Documents/code/jvstudy/rcoursera/RepData_PeerAssessment1")
unzip(activity.zip)
lwd()
list.files()
unzip("activity.zip")
?read.csv
data <- read.csv(activity.csv)
data <- read.csv("activity.csv")
file.remove("activity.csv")
str(data)
?mutate
?mean
names(data)
unique(date)
unique(data$date)
?as.date
?as.Date
data$Date <- as.Date(data$Date)
data$Date <- as.Date(data$Date, %Y-%m-%d" )
data$date <- as.Date(data$date, %Y-%m-%d" )
unique(data$date) #checking if the dates are proper
data$date <- as.Date(data$date, "%Y-%m-%d" )
unique(data$date) #checking if the dates are proper
?any
is.na(df)
unzip("activity.zip")
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
df$date <- as.Date(data$df, "%Y-%m-%d")
file.remove("activity.csv")
is.na(df)
?is.na
?find
apropos(NA, df)
find(NA, df, numeric=TRUE)
apply(is.na(df), 2, sum)
colSums(is.na(df)) #checking for missing values
dlist <- split(df, df$date)
str(df)
?sapply
?mean
mint <- sapply(split(df$steps, df$interval), mean, na.rm=TRUE)
mint
2366*5/60
max(interval)
max(df$interval)
2360/60
sum(unique(df$interval))
length(unique(df$interval))
288/12
length(unique(df$interval))/12 == 24
length(mint)
hist(mint)
?weekdays
df$wkday <- weekdays(df$date)
df$date <- as.Date(data$df, "%Y-%m-%d")
nzip("activity.zip")
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
length(unique(df$interval))/12 == 24 #checking if the intervals are proper
df$date <- as.Date(data$df, "%Y-%m-%d")
nzip("activity.zip")
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
length(unique(df$interval))/12 == 24 #checking if the intervals are proper
df$date <- as.Date(data$df, "%Y-%m-%d")
unzip("activity.zip")
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
length(unique(df$interval))/12 == 24 #checking if the intervals are proper
df$date <- as.Date(data$df, "%Y-%m-%d")
df$wkday <- weekdays(df$date)
df$date <- as.Date(df$date, "%Y-%m-%d")
df$wkday <- weekdays(df$date)
str(df)
colSums(is.na(df)) #checking for missing values
?mapply
dfcomp <- mapply(function(x, y) x$steps[is.na[x$steps]] <- y,
split(df$steps, df$interval), mint)
mint <- sapply(split(df$steps, df$interval), mean, na.rm=TRUE)
dfcomp <- mapply(function(x, y) x$steps[is.na[x$steps]] <- y,
split(df$steps, df$interval), mint)
dfcomp <- mapply(function(x, y) x[is.na(x)] <- y,
split(df$steps, df$interval), mint)
str(dfcomp)
dfcomp <- mapply(function(x, y) x$steps[is.na(x$steps)] <- y,
split(df, df$interval), mint)
dfcomp <- mapply(function(x, y){
x$steps[is.na(x$steps)] <- y
return(x)
},
split(df, df$interval), mint)
str(dfcomp)
as.list(mint)
dfcomp <- mapply(function(x, y){
x$steps[is.na(x$steps)] <- y
return(x)
},
split(df, df$interval), as.list(mint))
rm(dfcomp)
df$index[is.na(df$steps)]
is.na(df$steps)
df$interval[is.na(df$steps)]
mint[df$interval[is.na(df$steps)]]
complete.cases(mint[df$interval[is.na(df$steps)]])
mint[as.name(df$interval[is.na(df$steps)])]
?as.name
df$interval[is.na(df$steps)]
as.name(df$interval[is.na(df$steps)])
as.names(df$interval[is.na(df$steps)])
names(mint) == df$interval[is.na(df$steps)]
match(names(mint), df$interval[is.na(df$steps)])
?match
df$interval[is.na(df$steps)]
nint <- length(unique(df$interval))
nint/12 == 24 #checking if the intervals are proper
mint <- vector(length = nint)
?vector
mint <- vector(mode = "numeric", length = nint)
newlist <- mapply(function(x, y) {
mint[y] <- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
},
split(df$steps, df$interval), 1:nint)
split(df$steps, df$interval)
?mapply
newlist <- mapply(function(x, y) {
mint[y] <- mean(x$steps), na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
return(x)
},
split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
newlist <- mapply(function(x, y) {
mint[y] <- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
return(x)
}, split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
newlist[[1]]
mint
newlist <- mapply(function(x, y) {
mint[y] <<- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <<- mint[y]
return(x)
}, split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
newlist <- mapply(function(x, y) {
mint[y] <<- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
return(x)
}, split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
?do.call
dfcomp <- do.call(rbind, newlist)
str(dfcomp)
hist$mint
hist(mint)
plot(mint
)
plot(mint, type='l')
60*24
1440/12
228/12
228*5
288/12
c(1:1440, 12)
12*0:287
12*0:287
5*0:287
5*0:288
plot(5*0:288, mint, type='l')
plot( 5*0:287, mint, type='l')
max(df$ind)
max(df$interval)
?as,time
?as.time
?as.Time
?strptime
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
nint <- length(unique(df$interval))
nint/12 == 24 #checking if the intervals are proper
time <- strptime(paste(df$date, df$interval), "%Y-%m-%d %H%M")
str(time)
?gsub
plot(date$interval, mint, type='l')
## Unzipping and loading the data
unzip("activity.zip")
df <- read.csv("activity.csv")
str(df) #checking if the data was uploaded correctly
unique(df$date) #checking if the dates are proper
unique(df$interval)
nint <- length(unique(df$interval))
nint/12 == 24 #checking if the intervals are proper
time <- strptime(paste(df$date, df$interval), "%Y-%m-%d %H%M")
df$date <- as.Date(df$date, "%Y-%m-%d")
df$wkday <- weekdays(df$date)
file.remove("activity.csv")
colSums(is.na(df)) #checking for missing values
time <- strptime(paste(df$date, df$interval))
## Replacing NA's with the mean values for an interval
mint <- vector(mode = "numeric", length = nint)
templist <- mapply(function(x, y) {
mint[y] <<- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
return(x)
}, split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
dfcomp <- do.call(rbind, templist)
rm(templist)
plot(unique(date$interval), mint, type='l')
plot(unique(df$interval), mint, type='l')
plot(mint, type='l')
?plot
?as.ts
mint1 <- as.ts(mint, start = "00:00", end = "23:55")
mint1
plot(mint1, type='l', yaxis = "")
plot(mint1, type='l')
?ts
mint1 <- ts(mint, start = 0, deltat = 1/12)
plot(mint1, type='l')
mint1
?s
?ts
12*24
mint1 <- ts(mint, start = 0, deltat = 1/228)
plot(mint1, type='l')
?ts
mint1 <- ts(mint, start = 0, frequency = 228)
plot(mint1, type='l')
mint1 <- ts(mint, start = 0, frequency = 288)
plot(mint1, type='l')
sperday
sperday <- sapply(split(df$steps, df$date), sum, na.rm = TRUE)
sperday
hist(sperday, main = "Average number of steps per day", xlab = "")
hist(sperday, main = "Total number of steps per day", xlab = "", ylab = "Number of days")
hist(sperday, main = "Steps per day", xlab = "", ylab = "Number of days")
mean(sperday)
?median
mint <- ts(mint)
?plot
plot(mint, main="Daily Activity Pattern" xlabel = "5-minute interval")
plot(mint, main="Daily Activity Pattern" xlabel = "5-minute interval")
plot(mint, main="Daily Activity Pattern", xlabel = "5-minute interval")
plot(mint, main="Daily Activity Pattern", xlab = "5-minute interval")
plot(mint, main="Daily Activity Pattern", xlab = "5-minute interval",
ylab = "Mean number of steps")
max(mint)
argmax(mint)
?max
which.max(mint)
paste(which.max(mint), " with the average number of steps ", max(mint))
unique(df$interval)[which.max(mint)]
str(df)
weekend <- vector(length = nint)
weekend[df$wkday %in% c("Saturday", "Sunday") <- TRUE]
weekend[df$wkday %in% c("Saturday", "Sunday")] <- TRUE
weekend
weekend <- df$wkday %in% c("Saturday", "Sunday")
weekend
dlist <- split(df, weekend)
str(dlist[[1]])
weekend <- vector(length = nint)
weekend <- dfcomp$wkday %in% c("Saturday", "Sunday")
dlist <- split(dfcomp, weekend)
library(lattice)
dlist <- lapply(dlist, split, "interval")
dlist <- split(dfcomp, weekend)
dlist <- split(dfcomp, weekend)
dlist <- lapply(dlist, function(x){
sapply(split(x$steps, x$interval), mean)
})
dlist[[1]]
xyplot( ~dlist)
dlist <- split(dfcomp, weekend)
weekend <- vector(length = nint)
weekend <- dfcomp$wkday %in% c("Saturday", "Sunday")
dlist <- split(dfcomp, weekend)
dlist <- lapply(dlist, function(x){
sapply(split(x$steps, x$interval), mean)
})
unlist(dlist)
?unlist
grep("TRUE", names(unlist(dlist)))
grepl("TRUE", names(unlist(dlist)))
stepweek <- unlist(dlist)
stepweek <- cbind(stepweek, grepl("TRUE", names(stepweek)))
head(stepweek)
names(stepweek)
?substring
rownames(stepweek)
?sub
stepweek <- cbind(stepweek, rep(1:288, 2))
stepweek <- unlist(dlist)
stepweek <- cbind(stepweek, grepl("TRUE", names(stepweek)))
stepweek <- cbind(stepweek, rep(1:288, 2))
names(stepweek) <- c("steps", "weekend", "interval")
xyplot( steps ~ interval| weekend, data = stepweek)
library(lattice)
?xyplot
names(xyplot)
names(stepweek)
weekend <- dfcomp$wkday %in% c("Saturday", "Sunday")
dlist <- split(dfcomp, weekend)
dlist <- lapply(dlist, function(x){
sapply(split(x$steps, x$interval), mean)
})
stepweek <- unlist(dlist)
class(stepweek)
stepweek <- cbind(stepweek, grepl("TRUE", names(stepweek)))
dim(stepweek)
stepweek <- cbind(stepweek, rep(1:288, 2))
names(stepweek)
dim(stepweek)
stepweel <- as.dataframe(stepweek)
stepweek <- data.frame(stepweek)
names(stepweek) <- c("steps", "weekend", "interval")
xyplot(steps ~ interval| weekend, data = stepweek)
xyplot(steps ~ interval| weekend, data = stepweek, type = "l")
xyplot(steps ~ interval| factor(weekend, labels = c("Weekday", "Weekend"),
data = stepweek, type = "l")
xyplot(steps ~ interval| factor(weekend, labels = c("Weekday", "Weekend")),
data = stepweek, type = "l")
stepweek <- unlist(dlist)
stepweek <- data.frame(stepweek)
stepweek <- cbind(stepweek, ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday")
stepweek <- cbind(stepweek, rep(1:288, 2))
stepweek <- cbind(stepweek, ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday"))
stepweek <- unlist(dlist)
stepweek <- data.frame(stepweek)
stepweek <- cbind(stepweek, ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday"))
stepweek <- cbind(stepweek, rep(1:288, 2))
names(stepweek) <- c("steps", "weekend", "interval")
str(stepweek)
stepweek <- unlist(dlist)
stepweek <- data.frame(stepweek)
stepweek$weekend <- NULL
ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday")
stepweek <- unlist(dlist)
ifelse(grepl("TRUE", colnames(stepweek)), "Weekend", "Weekday")
ifelse(grepl("TRUE", rownames(stepweek)), "Weekend", "Weekday"))
ifelse(grepl("TRUE", rownames(stepweek)), "Weekend", "Weekday")
rownames(stepweek)
names(stepweek)
ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday")
stepweek <- unlist(dlist)
stepweek <- rbind(stepweek, ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday"))
stepweek <- cbind(stepweek, rep(1:288, 2))
stepweek <- unlist(dlist)
stepweek <- cbind(stepweek, ifelse(grepl("TRUE", names(stepweek)), "Weekend", "Weekday"))
stepweek <- cbind(stepweek, rep(1:288, 2))
stepweek <- data.frame(stepweek)
names(stepweek) <- c("steps", "weekend", "interval")
str(stepweek)
xyplot(steps ~ interval| factor(weekend, labels = c("Weekday", "Weekend")),
data = stepweek, type = "l")
xyplot(steps ~ interval| weekend,
data = stepweek, type = "l")
xyplot(steps ~ interval| weekend,
data = stepweek, type = "l")
unzip("activity.zip")
df <- read.csv("activity.csv")
nint <- length(unique(df$interval))
df$date <- as.Date(df$date, "%Y-%m-%d")
df$wkday <- weekdays(df$date)
file.remove("activity.csv")
```{r mday, echo =TRUE}
sperday <- sapply(split(df$steps, df$date), sum, na.rm = TRUE)
```
sperday <- sapply(split(df$steps, df$date), sum, na.rm = TRUE)
hist(sperday, main = "Steps per day", xlab = "", ylab = "Number of days")
mint <- vector(mode = "numeric", length = nint)
templist <- mapply(function(x, y) {
mint[y] <<- mean(x$steps, na.rm = TRUE)
x$steps[is.na(x$steps)] <- mint[y]
return(x)
}, split(df, df$interval), 1:nint, SIMPLIFY = FALSE)
dfcomp <- do.call(rbind, templist)
rm(templist)
weekend <- ifelse(dfcomp$wkday %in% c("Saturday", "Sunday"), "weekend", "weekday")
dlist <- split(dfcomp, weekend)
dlist <- lapply(dlist, function(x){
sapply(split(x$steps, x$interval), mean)
})
names(unlist(dlist))
?substr
stepweek <- unlist(dlist)
substr(names(dlist), 1, 7)
substr(names(stepweek), 1, 7)
stepweek <- unlist(dlist)
stepweek <- cbind(stepweek, substr(names(stepweek), 1, 7))
stepweek <- cbind(stepweek, rep(1:288, 2))
stepweek <- data.frame(stepweek)
names(stepweek) <- c("steps", "weekend", "interval")
xyplot(steps ~ interval| weekend,
data = stepweek, type = "l")
library(lattice)
xyplot(steps ~ interval| weekend,
data = stepweek, type = "l")
?xyplot
xyplot(~steps| weekend,  data = stepweek, type = "l")
xyplot(steps| weekend,  data = stepweek, type = "l")
xyplot(steps~interval| weekend,  data = stepweek, type = "l")
xyplot(interval ~steps | weekend,  data = stepweek, type = "l")
plot(interval, steps,  data = stepweek, type = "l")
names(stepweek)
stepweek <- unlist(dlist)
weekday <- substr(names(stepweek), 1, 7)
interval <- rep(1:288, 2))
stepweek <- unlist(dlist)
weekday <- substr(names(stepweek), 1, 7)
interval <- rep(1:288, 2)
xyplot(stepweek ~interval | weelday)
xyplot(stepweek ~interval | weekday)
xyplot(stepweek ~interval | weekday, type = "l")
yplot(stepweek ~interval | weekday, type = "l", xlab = "Interval number",
ylab = "Average number of steps")
xyplot(stepweek ~interval | weekday, type = "l", xlab = "Interval number",
ylab = "Average number of steps")
xyplot(stepweek ~interval | weekday, type = "l", layout = c(2, 1), xlab = "Interval number",
ylab = "Average number of steps")
library(lattice)
xyplot(stepweek ~interval | weekday, type = "l", layout = c(1, 2), xlab = "Interval number",
ylab = "Average number of steps")
sperday2 <- sapply(split(dfcomp$steps, dfcomp$date), sum, na.rm = TRUE)
hist(sperday2, main = "Steps per day", xlab = "", ylab = "Number of days")
mean(sperday2)
median(sperday2)
median(sperday)
mean(sperday)
